processor Resonator  [[ main ]] {
    input stream float<2> in;
    output stream float<2> out;

    input value float dry [[ min: 0, max: 1.0, init: 1.0, step: 0.01, name: "dry" ]];
    input value float wet [[ min: 0, max: 1.0, init: 1.0, step: 0.01, name: "wet" ]];
    input value float dampen [[ min: 0, max: 1.0, init: 1.0, step: 0.01, name: "dampen" ]];
    input value float amountglobal [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "amount" ]];
    input value float amount1 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "C4" ]];
    input value float amount2 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "C#4" ]];
    input value float amount3 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "D4" ]];
    input value float amount4 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "D#4" ]];
    input value float amount5 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "E4" ]];
    input value float amount6 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "F4" ]];
    input value float amount7 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "F#4" ]];
    input value float amount8 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "G4" ]];
    input value float amount9 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "G#4" ]];
    input value float amount10 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "A4" ]];
    input value float amount11 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "A#4" ]];
    input value float amount12 [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "B4" ]];
    input value float threshold [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "threshold" ]];
    input value float attack [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "attack" ]];
    input value float release [[ min: 0, max: 1.0, init: 0, step: 0.01, name: "release" ]];

    

    // Utils
    float expScale(float x) {
        return exp(10.0f * (x - 1));
    }  
    
    struct Delay {
        float[2048] buffer;
        wrap<2048> index;

        float process(float x, int time, float amount, float dampen) {
            this.buffer[this.index] = pow(amount, 0.1f) * x + amount * ((0.98f - 0.49f * dampen) * this.buffer.at((this.index-time)%2048) + 0.49f * dampen * this.buffer.at((this.index-time-1)%2048));
            this.index++;
            return this.buffer.at(this.index-time-1);
        }
    }

    struct AmpFollower {
        float y;

        // Smoothes the signal by applying some attack and release
        float process(float x, float attack, float release) {
            float riseRate = exp(-10 * attack);
            float fallRate = exp(-10 * release);
            if (abs(x) > this.y) {
                this.y += (abs(x) - this.y) * riseRate;
            } else {
                this.y += (abs(x) - this.y) * fallRate;
            }
            return this.y;
        }
    }

    struct AbsHeaviside {
        // Takes the abs of the signal, then outputs 0 if less than threshold or 1 otherwise
        float process(float x, float threshold) {
            float bias = 0.001f;
            if (abs(x) + bias > expScale(threshold)) {
                return 1.0f;
            } else {
                return 0.0f;
            }
        }
    }


    void main() {

        Delay[12] delayLs;
        for (int i = 0; i < 12; i++) {
            delayLs.at(i) = Delay();
        }

        Delay[12] delayRs;
        for (int i = 0; i < 12; i++) {
            delayRs.at(i) = Delay();
        }

        AbsHeaviside absHeavisideL;
        AbsHeaviside absHeavisideR;
        
        AmpFollower ampFollowerL;
        AmpFollower ampFollowerR;

        loop {
            float[12] amounts = (amount1, amount2, amount3, amount4, amount5, amount6, amount7, amount8, amount9, amount10, amount11, amount12);
            
            float sampleRate = float(processor.frequency);

            float xL = in[0];
            float xR = in[1];

            float ampL = ampFollowerL.process(absHeavisideL.process(xL, threshold), attack, release);
            float ampR = ampFollowerR.process(absHeavisideR.process(xR, threshold), attack, release);
            
            
            float yL = 0.0f;
            for (int i = 0; i < 12; i++) {
                int wavelength = int(sampleRate/(440.0f*pow(1.05946309436f, -9.0f + float(i))));
                float amount = amounts.at(i) * amountglobal * ampL;
                yL += delayLs.at(i).process(xL, wavelength, amount, dampen);
            }

            yL *= 0.25f;    // TODO: Magic number


            
            float yR = 0.0f;
            for (int i = 0; i < 12; i++) {
                int wavelength = int(sampleRate/(440.0f*pow(1.05946309436f, -9.0f + float(i))));
                float amount = amounts.at(i) * amountglobal * ampR;
                yR += delayRs.at(i).process(xR, wavelength, amount, dampen);
            }

            yR *= 0.25f;    // TODO: Magic number

            

            out <- (yL * wet + xL * dry, yR * wet + xR * dry);
            
            advance();
        }
    }
}
